<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Nhóm nền sáng chữ tối -->
    <SolidColorBrush x:Key="LightPrimaryBrush" Color="#FFB74D"/>
    <SolidColorBrush x:Key="PrimaryBrush" Color="#FF9800"/>
    <SolidColorBrush x:Key="DarkPrimaryBrush" Color="#F57000"/>

    <!-- Nhóm nền tối chữ sáng -->
    <SolidColorBrush x:Key="LightSecondaryBrush" Color="#7986CB"/>
    <SolidColorBrush x:Key="SecondaryBrush" Color="#3F51B5"/>
    <!-- Nhóm nền sáng chữ tối -->
    <SolidColorBrush x:Key="DarkSecondaryBrush" Color="#303F9F"/>

    <!-- Chế độ Dark, chữ sáng -->
    <!--<SolidColorBrush x:Key="BackgroundBrush" Color="#263238"/>
    <SolidColorBrush x:Key="SurfacesBrush" Color="#AA262338"/>-->
    <SolidColorBrush x:Key="BackgroundBrush" Color="#AA262338"/>
    <SolidColorBrush x:Key="SurfacesBrush" Color="#263238"/>
    <SolidColorBrush x:Key="ErrorsBrush" Color="#D50000"/>

    <SolidColorBrush x:Key="TextWriteBrush" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TextBlackBrush" Color="#000000"/>

    <sys:Double x:Key="fontSizeBig">48</sys:Double>
    <sys:Double x:Key="fontSizeMiddle">28</sys:Double>
    <sys:Double x:Key="fontSizeSmall">16</sys:Double>

    <FontFamily x:Key="fontFamily">Time New Roman</FontFamily>
    <!--<FontFamily x:Key="fontFamily">Candara</FontFamily>-->
    <!--<sys:Double x:Key="fontSizeHeader">56</sys:Double>
    <sys:Double x:Key="fontSizeCaption">34</sys:Double>
    <sys:Double x:Key="fontSizeContent">20</sys:Double>-->

    <!--############################################################################################################################################################################################-->
    <!--==========================================================================================================
    Qui ước chung:
     - Title:   Tiêu đề được đặt căn giữa
     - Caption: Tiêu đề được đặt căn lề trái
    
     - Content: Nội dung thông tin được đặt căn giữa
     - Infor:   Nội dung thông tin được đặt căn trái
    
     - Có 3 fontsize: Big (Chỉ áp dụng cho tên chương trình), Middle (Áp dụng cho hầu hết các nội dung), Small (Áp dụng cho phần thông tin phụ, bổ sung)
     - Tất cả mặc định căn giữa theo chiều dọc, trừ trường hợp qui định riêng trong code
     - Màu chữ mặc định màu trắng (sáng), trừ trường hợp qui định riêng trong code
    ==========================================================================================================-->
    <Style TargetType="TextBlock" x:Key="themeTextBlockBase">
        <Setter Property="FontFamily" Value="{StaticResource fontFamily}"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="3"/>
    </Style>
    <!--==========================================================================================================-->
    <!-- TextBlock căn trái -->
    <Style TargetType="TextBlock" x:Key="themeTextBlockLeft" BasedOn="{StaticResource themeTextBlockBase}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="themeTextBlockBigLeft" BasedOn="{StaticResource themeTextBlockLeft}">
        <Setter Property="FontSize" Value="{StaticResource fontSizeMiddle}"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="themeTextBlockSmallLeft" BasedOn="{StaticResource themeTextBlockLeft}">
        <Setter Property="FontSize" Value="{StaticResource fontSizeSmall}"/>
    </Style>

    <!--==========================================================================================================-->
    <!-- TextBlock căn giữa -->
    <Style TargetType="TextBlock" x:Key="themeTextBlockCenter" BasedOn="{StaticResource themeTextBlockBase}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="themeTextBlockBigCenter" BasedOn="{StaticResource themeTextBlockCenter}">
        <Setter Property="FontSize" Value="{StaticResource fontSizeMiddle}"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="themeTextBlockSmallCenter" BasedOn="{StaticResource themeTextBlockCenter}">
        <Setter Property="FontSize" Value="{StaticResource fontSizeSmall}"/>
    </Style>
    <!--==========================================================================================================-->
    <Style TargetType="TextBlock" x:Key="themeTextBlockConnectState" BasedOn="{StaticResource themeTextBlockSmallLeft}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Foreground" Value="Yellow"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="Connected!">
                <Setter Property="Foreground" Value="LimeGreen"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="Disconnected!">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    <!--############################################################################################################################################################################################-->
    <Style TargetType="RadioButton" x:Key="themeMainMenuButton">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="85"/>
        <Setter Property="Width" Value="75"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="65"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="{TemplateBinding Background}"
                                BorderThickness="1" BorderBrush="{TemplateBinding Foreground}" CornerRadius="5"/>
                        <TextBlock Grid.Row="1" Text="{TemplateBinding Content}"
                                   TextAlignment="Center" FontSize="14" Foreground="{TemplateBinding Foreground}"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource LightPrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource DarkPrimaryBrush}"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.01" ScaleY="1.01"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToggleButton" x:Key="themeButtonRun">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="Height" Value="170"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="IsChecked" Value="False"/>
        <!--<Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.0, 1.0" EndPoint="0.5, 0.5" SpreadMethod="Reflect">
                    <GradientStopCollection>
                        <GradientStop Offset="0.5" Color="White"/>
                        <GradientStop Offset="1" Color="LimeGreen"/>
                    </GradientStopCollection>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Ellipse Width="170" Height="170" StrokeThickness="1" Panel.ZIndex="0"
                                 Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}"
                                 RenderTransformOrigin="0.5, 0.5">
                            <Ellipse.RenderTransform>
                                <RotateTransform x:Name="angle"/>
                            </Ellipse.RenderTransform>
                            <Ellipse.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:7.2" To="180"
                                                                 Storyboard.TargetName="angle" 
                                                                 Storyboard.TargetProperty="Angle"
                                                                 RepeatBehavior="Forever"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Ellipse.Triggers>
                        </Ellipse>

                        <Ellipse Width="135" Height="135" StrokeThickness="1"  Panel.ZIndex="1"
                                 Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding BorderBrush}"/>

                        <TextBlock Text="{TemplateBinding Content}" FontSize="{StaticResource fontSizeBig}"
                                   Foreground="{TemplateBinding Foreground}" Panel.ZIndex="2"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Gold"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.01" ScaleY="1.01"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".8"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True">
                            <Setter Property="Content" Value="Khóa"/>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.0, 1.0" EndPoint="0.5, 0.5" SpreadMethod="Reflect">
                                        <GradientStopCollection>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Red"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False">
                            <Setter Property="Content" Value="Mở"/>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.0, 1.0" EndPoint="0.5, 0.5" SpreadMethod="Reflect">
                                        <GradientStopCollection>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="LimeGreen"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="RadioButton" x:Key="themeRadioButtonBase">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontFamily" Value="{StaticResource fontFamily}"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkPrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DarkSecondaryBrush}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{StaticResource LightPrimaryBrush}"/>-->
                <Setter Property="Foreground" Value="{StaticResource LightPrimaryBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkPrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DarkSecondaryBrush}"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.01" ScaleY="1.01"
                                        CenterX="0.5" CenterY="0.5"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="RadioButton" x:Key="themeButtonExit" BasedOn="{StaticResource themeRadioButtonBase}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Height" Value="55"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightPrimaryBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="5" BorderThickness="1">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                   Style="{StaticResource themeTextBlockBigCenter}" HorizontalAlignment="Stretch"
                                   Margin="10" TextAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="themeButtonBase">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontFamily" Value="{StaticResource fontFamily}"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{StaticResource LightPrimaryBrush}"/>-->
                <Setter Property="Foreground" Value="{StaticResource LightPrimaryBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkPrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DarkSecondaryBrush}"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.01" ScaleY="1.01"
                                        CenterX="0.5" CenterY="0.5"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="themeButtonToolBar">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontFamily" Value="{StaticResource fontFamily}"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1" CornerRadius="5">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource LightPrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource DarkPrimaryBrush}"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.01" ScaleY="1.01"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="themeButtonNormal">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontFamily" Value="{StaticResource fontFamily}"/>
        <Setter Property="Foreground" Value="{StaticResource TextWriteBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1" CornerRadius="5">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   FontSize="{StaticResource fontSizeSmall}"
                                   Text="{TemplateBinding Content}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource LightPrimaryBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource DarkPrimaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource DarkPrimaryBrush}"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.01" ScaleY="1.01"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>